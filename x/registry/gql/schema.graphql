#
# Copyright 2019 Wireline, Inc.
#

# BigUInt is a 64-bit unsigned int.
scalar BigUInt

# Value of a given type.
type Value {
  null:       Boolean

  int:        Int
  float:      Float
  string:     String
  boolean:    Boolean

  values:     [Value]
}

# Key/value pair.
type KeyValue {
  key:        String!
  value:      Value!
}

# Value of a given type used as input to queries.
input ValueInput {
  null:       Boolean

  int:        Int
  float:      Float
  string:     String
  boolean:    Boolean

  values:     [ValueInput]
}

# Key/value pair for inputs.
input KeyValueInput {
  key:        String!
  value:      ValueInput!
}

# Record is a base object which is used as a mixin for other types within the Registry.
type Record {
  id:         String!         # wrn:record:xxxxxxx.
  type:       String!         # wrn:registry-type:xxxxxxx.
  owner:      String!         # Address of record owner.
  system:     [KeyValue]      # System attributes (e.g. deleted flag).
  attributes: [KeyValue]      # User defined attributes.
  links:      [Link]          # User defined links.
}

# Mutations require payment in coins (e.g. 100wire).
# Used by the wallet to get the account balance for display and mutations.
type Coin {
  type:       String!         # e.g. 'WIRE'
  amount:     BigUInt!        # e.g. 1000000
}

# Represents an account on the blockchain.
# Mutations have to be signed by a particular account.
type Account {
  address:  String!           # Blockchain address.
  pubKey:   String            # Public key.
  number:   BigUInt!          # Account number.
  sequence: BigUInt!          # Sequence number used to prevent replays.
  balance:  [Coin!]           # Current balance for each coin type.
}

# Protocols denote protobuf messages used by applications.
type Protocol {
  record:   Record
}

# Bots are autonomous agents that interact with users (and other bots).
type Bot {
  record:     Record
  name:       String!
  accessKey:  String
}

# Pads are software modules that provide the UI/UX for applications.
type Pad {
  record:   Record
}

# Registry status.
type Status {
  version:  String!
}

# Result for record queries.
type Result {
  record:   Record
  protocol: Protocol
  bot:      Bot
  pad:      Pad
}

# Link to a record/result.
type Link {
  id:         String!         # wrn:record:xxxxxxx.
  attributes: [KeyValue]      # User defined link attributes.
  target:     Result          # Linked record/result.
}

# Condition for queries.
input ConditionInput {
  # All key/value inputs are logically AND-ed together.
  attributes: [KeyValueInput]   # Match attributes.
  links:      [KeyValueInput]   # Match link attributes.
  meta:       [KeyValueInput]   # Meta conditions, e.g. return 'deleted' records.
}

# Condition for queries.
type Condition {
  # All key/value inputs are logically AND-ed together.
  attributes: [KeyValue]   # Match attributes.
  links:      [KeyValue]   # Match link attributes.
  meta:       [KeyValue]   # Meta conditions, e.g. return 'deleted' records.
}

# Result set for record queries.
type ResultSet {
  conditions: [Condition]
  results:    [Result]
}

type Query {

  #
  # Status API.
  #
  getStatus: Status!

  #
  # Wallet API.
  #

  # Get blockchain accounts.
  getAccounts(
    addresses: [String!]
  ): [Account]

  #
  # Low layer API, works with bare records.
  #

  # Get records by IDs.
  getRecordsByIds(
    ids: [String!]
  ): ResultSet

  # Query records.
  queryRecords(
    # Multiple conditions are OR-ed together.
    conditions: [ConditionInput]
  ): ResultSet

  #
  # High layer API, works with types.
  # TODO(ashwin): Remove high layer API?

  # Query protocols.
  queryProtocols(
    conditions: [ConditionInput]
  ): ResultSet

  # Query bots.
  queryBots(
    conditions: [ConditionInput]
  ): ResultSet

  # Query pads.
  queryPads(
    conditions: [ConditionInput]
  ): ResultSet
}

type Mutation {

  # Submit a transaction to the blockchain.
  # `tx` is a blob created by https://github.com/wirelineio/registry-client.
  submit(tx: String!): String
}
