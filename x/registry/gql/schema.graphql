#
# Copyright 2019 Wireline, Inc.
#

# TODO(burdon): Comments for everything.

type Resource {
  id: String!
  type: String!
  owner: Owner!
  systemAttributes: String    # Is this always going to be an opaque ID?
  attributes: String          # Same
  links: [Link!]
}

type Owner {
  id: String
  address: String
}

type Link {
  id: String!
  attributes: String
}

type Coin {
  denom: String!              # denomination?
  amount: Int!
}

type Account {
  address: String!
  pubKey: String
  num: Int!                   # cosmos specific in GQL API?
  seq: Int!
  coins: [Coin!]
}

type Pseudonym {              # what is this? is this a User? pseudonym of what?
  resource: Resource
  name: String!
  dsinvite: String            # what is this. DS doesn't mean anything it's a marketing name. invite?
}

type Bot {
  resource: Resource
  name: String!
  dsinvite: String
}

type Query {

  #
  # Wallet API.
  #

  getAccounts(
    addresses: [String!]
  ): [Account]

  #
  # Low layer API, works with bare resources.
  #

  getResources(
    namespace: String
  ): [Resource]!

  getResourcesById(
    ids: [String!]
  ): [Resource]!

  #
  # High layer API, works with types.
  #

  getBots(
    namespace: String     # TODO(burdon): If you query by something IT HAS TO BE INCLUDED IN THE RESPONSE (currently Bot does not have a namespace field)
    name: [String!]
  ): [Bot]

  getPseudonyms(
    namespace: String
    name: [String!]
  ): [Pseudonym]
}

type Mutation {

  # TODO(burdon): Is this always going to be opaque? This is a GQL Registry protocol (leaking implementation details).
  # Tx methods roughly correspond to those in https://github.com/tendermint/tendermint/blob/master/rpc/core/mempool.go
  broadcastTxCommit(tx: String!): String
}
